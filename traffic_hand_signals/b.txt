/ let video;
// let poseNet; //a variable
// let pose;
// let skeleton;
// let brain;
// let state = 'waiting';
// let targetLabel;
// function keyPressed(){
//     targetLabel = key;
//     console.log(targetLabel);
//     setTimeout(function(){
//     console.log('collecting');    
//     state = 'collecting';
//     }, 1000);
// }
// function setup(){
//     createCanvas(640, 480);
//     video = createCapture(VIDEO);
//     video.hide();
//     poseNet = ml5.poseNet(video, modelLoaded); //we're referencing ml5 library.the name of function 
//     //poseNet works differently than ml5.js library, it works based on event handlers 
//     //so if I want to set up a pose event by calling this method "on", on pose I want this function to execute, whenever thise posenet model detects a pose, then call this function and give me the results of that pose
//     poseNet.on('pose', gotPoses);
//     let options = {
//         inputs: 34,
//         outputs: 4,
//         task: 'classification',
//         debug: true
//     }
//     brain = ml5.neuralNetwork(options);
// }
// //everytime it sees a pose it'll log that to the console right here
// function gotPoses(poses){
//     console.log(poses);
//     //if the length of the array is zero, 
//     if(poses.length > 0){
//         //save first pose in a global variable 'pose'
//         pose = poses[0].pose;
//         skeleton = poses[0].skeleton;

//         let inputs = [];
//         for(let i = 0; i < pose.keypoints.length; i++){
//             let x = pose.keypoints[i].position.x;
//             let y = pose.keypoints[i].position.y;
//             inputs.push(x);
//             inputs.push(y);
//         }
//         let target = [targetLabel];
//         brain.addData(inputs, target);
//     }
// }
// function modelLoaded(){
//     console.log('posenet ready!!');
// }
// function draw(){
//     translate(video.width, 0);
//     scale(-1, 1);
//     image(video, 0, 0, video.width, video.height);
//     //check first if we've gotten a valid pose
//     if(pose){
//         let eyeR = pose.rightEye;
//         let eyeL = pose.leftEye;
//         //calculating using dist() function distance between the two eyes
//         let d = dist(eyeR.x, eyeR.y, eyeL.x, eyeL.y);
//     fill(255, 0, 0);
//     //assigning d to the size of the nose
//     ellipse(pose.nose.x, pose.nose.y, d);
//     fill(0,0,255);
//     ellipse(pose.rightWrist.x, pose.rightWrist.y, 32);
//     ellipse(pose.leftWrist.x, pose.leftWrist.y, 32);

//     for(let i = 0; i < pose.keypoints.length; i++){
//         let x = pose.keypoints[i].position.x;
//         let y = pose.keypoints[i].position.y;
//         fill(0, 255, 0);
//         ellipse(x, y, 16, 16);
//     }
//     for(let i = 0; i < skeleton.length; i++){
//        let a = skeleton[i][0];
//        let b = skeleton[i][1];
//        strokeWeight(2);
//        stroke(255);
//        line(a.position.x, a.position.y, b.position.x, b.position.y); 
//     }
//     }
// }
// //there can be multiple poses that the model is detecting more than one person, if we take a look at one object, it has two properties, pose and skeleton 
// //we'll take the output of the posenet pretrained model and feed that into an ml5 neural network to train a pose classifier  
